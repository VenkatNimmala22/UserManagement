using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using UserManagementApp.Data;
using UserManagementApp.Models;
using UserManagementApp.Services;
using System.Text.RegularExpressions;

namespace UserManagementApp.Controllers
{
    public class UserController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogService _logService;

        public UserController(ApplicationDbContext context, ILogService logService)
        {
            _context = context;
            _logService = logService;
        }

        // GET: User
        public async Task<IActionResult> Index()
        {
            try
            {
                await _logService.LogInfoAsync("Accessing users list page");

                var users = await _context.Users
                    .OrderByDescending(u => u.CreatedAt)
                    .ToListAsync();

                await _logService.LogInfoAsync($"Retrieved {users.Count} users successfully");
                return View(users);
            }
            catch (Exception ex)
            {
                await _logService.LogErrorAsync(ex, "Error occurred while retrieving users list");
                TempData["ErrorMessage"] = "An error occurred while loading users.";
                return View(new List<User>());
            }
        }

        // GET: User/Create
        public async Task<IActionResult> Create()
        {
            await _logService.LogInfoAsync("Accessing user creation page");
            return View();
        }

        // POST: User/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Name,Email,Phone,DateOfBirth")] User user)
        {
            try
            {
                await _logService.LogInfoAsync($"Attempting to create user with email: {user.Email}");

                // Explicit check for digits in Name
                if (!string.IsNullOrEmpty(user.Name) && Regex.IsMatch(user.Name, @"\d"))
                {
                    var ex = new Exception("Name contains integer values, which is not allowed.");
                    await _logService.LogErrorAsync(ex, $"Invalid name input: {user.Name}");
                    ModelState.AddModelError("Name", "Name cannot contain numbers.");
                    return View(user);
                }

                if (ModelState.IsValid)
                {
                    user.CreatedAt = DateTime.Now;
                    _context.Add(user);
                    await _context.SaveChangesAsync();

                    await _logService.LogInfoAsync($"User created successfully: {user.Name} ({user.Email})");
                    TempData["SuccessMessage"] = "User created successfully!";
                    return RedirectToAction(nameof(Index));
                }

                await _logService.LogWarningAsync("User creation failed due to validation errors");
                return View(user);
            }
            catch (DbUpdateException ex) when (ex.InnerException?.Message.Contains("duplicate") == true)
            {
                await _logService.LogErrorAsync(ex, $"Duplicate email attempt: {user.Email}");
                ModelState.AddModelError("Email", "This email address is already registered.");
                return View(user);
            }
            catch (Exception ex)
            {
                await _logService.LogErrorAsync(ex, $"Error creating user: {user.Email}");
                TempData["ErrorMessage"] = "An error occurred while creating the user.";
                return View(user);
            }
        }

        // GET: User/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            try
            {
                if (id == null)
                {
                    await _logService.LogWarningAsync("Edit attempt with null ID");
                    return NotFound();
                }

                var user = await _context.Users.FindAsync(id);
                if (user == null)
                {
                    await _logService.LogWarningAsync($"User not found for edit: ID {id}");
                    return NotFound();
                }

                await _logService.LogInfoAsync($"Accessing edit page for user: {user.Name} (ID: {id})");
                return View(user);
            }
            catch (Exception ex)
            {
                await _logService.LogErrorAsync(ex, $"Error accessing edit page for user ID: {id}");
                TempData["ErrorMessage"] = "An error occurred while loading user details.";
                return RedirectToAction(nameof(Index));
            }
        }

        // POST: User/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,Name,Email,Phone,DateOfBirth,CreatedAt")] User user)
        {
            try
            {
                if (id != user.Id)
                {
                    await _logService.LogWarningAsync($"ID mismatch in edit: URL ID {id}, Model ID {user.Id}");
                    return NotFound();
                }

                if (ModelState.IsValid)
                {
                    _context.Update(user);
                    await _context.SaveChangesAsync();

                    await _logService.LogInfoAsync($"User updated successfully: {user.Name} (ID: {id})");
                    TempData["SuccessMessage"] = "User updated successfully!";
                    return RedirectToAction(nameof(Index));
                }

                await _logService.LogWarningAsync($"User update failed due to validation errors for ID: {id}");
                return View(user);
            }
            catch (DbUpdateConcurrencyException ex)
            {
                if (!UserExists(user.Id))
                {
                    await _logService.LogErrorAsync(ex, $"User no longer exists: ID {user.Id}");
                    return NotFound();
                }
                else
                {
                    await _logService.LogErrorAsync(ex, $"Concurrency error updating user: ID {user.Id}");
                    throw;
                }
            }
            catch (DbUpdateException ex) when (ex.InnerException?.Message.Contains("duplicate") == true)
            {
                await _logService.LogErrorAsync(ex, $"Duplicate email in update: {user.Email}");
                ModelState.AddModelError("Email", "This email address is already registered.");
                return View(user);
            }
            catch (Exception ex)
            {
                await _logService.LogErrorAsync(ex, $"Error updating user: ID {id}");
                TempData["ErrorMessage"] = "An error occurred while updating the user.";
                return View(user);
            }
        }

        // GET: User/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            try
            {
                if (id == null)
                {
                    await _logService.LogWarningAsync($"Delete page accessed with null ID");
                    return NotFound();
                }

                var user = await _context.Users.FindAsync(id);
                if (user == null)
                {
                    var message = $"Attempted to access delete page for non-existent user with ID: {id}";
                    await _logService.LogWarningAsync(message);
                    return NotFound();
                }

                await _logService.LogInfoAsync($"Accessing delete confirmation page for user: {user.Name} (ID: {id})");
                return View(user);
            }
            catch (Exception ex)
            {
                await _logService.LogErrorAsync(ex, $"Error accessing delete page for user ID: {id}");
                TempData["ErrorMessage"] = "An error occurred while loading the delete page.";
                return RedirectToAction(nameof(Index));
            }
        }

        // POST: User/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                var message = $"Attempted to delete non-existent user with ID: {id}";
                await _logService.LogWarningAsync(message);
                TempData["ErrorMessage"] = "User not found.";
                return RedirectToAction(nameof(Index));
            }

            try
            {
                string userName = user.Name; // Store for logging after deletion
                string userEmail = user.Email;

                await _logService.LogInfoAsync($"Attempting to delete user: {userName} (ID: {id})");
                
                _context.Users.Remove(user);
                await _context.SaveChangesAsync();

                await _logService.LogInfoAsync($"Successfully deleted user: {userName} (Email: {userEmail})");
                TempData["SuccessMessage"] = "User was successfully deleted.";
                return RedirectToAction(nameof(Index));
            }
            catch (DbUpdateConcurrencyException ex)
            {
                await _logService.LogErrorAsync(ex, $"Concurrency error while deleting user: {user.Name} (ID: {id})");
                TempData["ErrorMessage"] = "The user was modified by another user. Please try again.";
                return RedirectToAction(nameof(Index));
            }
            catch (DbUpdateException ex)
            {
                await _logService.LogErrorAsync(ex, $"Database error while deleting user: {user.Name} (ID: {id})");
                TempData["ErrorMessage"] = "A database error occurred while deleting the user.";
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                await _logService.LogErrorAsync(ex, $"Unexpected error while deleting user: {user.Name} (ID: {id})");
                TempData["ErrorMessage"] = "An unexpected error occurred while deleting the user.";
                return RedirectToAction(nameof(Index));
            }
        }

        private bool UserExists(int id)
        {
            return _context.Users.Any(e => e.Id == id);
        }
    }
}